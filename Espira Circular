import numpy as np
import matplotlib.pyplot as plt
from numpy import pi,log,cos,sin
from matplotlib.patches import Circle

def representa_perfil(x,y,M,title='',ztitle='$rho$'):
    plt.figure(figsize=(20,10))
    plt.subplot(121)
    plt.plot(x,np.transpose(M),color='k')
    plt.title(title + "$\ vista\ desde\ el\ plano\ x$")
    plt.xlabel('$x$')
    plt.ylabel(ztitle)

    plt.subplot(122)
    plt.plot(y,M,color='k')
    plt.title(title + "$\ vista\ desde\ el\ plano\ y$")
    plt.xlabel('$y$')
    plt.ylabel(ztitle)

    plt.show()

'''
Por último, definiremos la función que representará un campo vectorial automáticamente.
'''

def representa_cv(x,y,ex,ey,cmap=plt.cm.inferno,density=2,title='',L=2):
    fig, ax = plt.subplots(figsize=(10,10))
    color = 2*log(abs(np.hypot(ex, ey)))
    plt.streamplot(x, y, ex, ey, color=color, linewidth=1, cmap=cmap, density=density,
                   arrowstyle='->', arrowsize=1.5)

    color_carga = {True: '#aa0000', False: '#0000aa'}
    for q, pos in cargas:
        plt.Axes.add_patch(ax,Circle(pos, 0.02*L, color=color_carga[q>0]))
    plt.title(title)
    plt.xlabel('$x$')
    plt.ylabel('$y$')
    plt.axis('square')
    plt.xlim((L0,L0+L))
    plt.ylim((L0,L0+L))

    plt.show()
def representa2d(x,y,M,colorinterpolation=50,cmap=plt.cm.hsv,title=''):
    plt.figure(figsize=(10,10))
    plt.contourf(x, y, M, colorinterpolation, cmap=cmap)
    plt.axis('square')
    plt.title(title)
    plt.xlabel('$x$')
    plt.ylabel('$y$')
    plt.colorbar()
    plt.show()
    
    
def Pos(r):
	i = int((r[0]-L0)/h)
	j = int((r[1]-L0)/h)
	return i,j
def V(q,r0,x,y):
    den=np.hypot(x-r0[0],y-r0[1])
    return q/den
L  = 20.0
L0 = -10.0
N = 50
h = L/(N-1) #resolucion


#unos vectores x, y que contienen las posiciones
x = np.linspace(-10,10,N) 
y = np.linspace(-10,10,N)

# Podemos definir una red (grid)
# son matrizces de posiciones que nos serán últiles más tarde
# Esto nos darÃ¡ un poco mÃ¡s de juego y nos permitirÃ¡ representar campos vectoriales.
X,Y = np.meshgrid(y,x)

M=np.zeros((N,N))
rho = np.zeros((N,N))


dq = 5

# Definimos dosnde estÃ¡n las cargas

cargas=[]
# Definición de la distribución de carga cuadrada)
theta1 = np.linspace(0,2* np.pi, 1000)
radius = 6
x_circular = radius * np.cos(theta1)
y_circular = radius * np.sin(theta1)

# Generamos las posiciones de carga siguiendo la trayectoria circular
cargas = [(dq, (x, y)) for x, y in zip(x_circular, y_circular)]
for carga in cargas:
	rho[Pos(carga[1])]=carga[0]
    
V0 = np.zeros((N,N))
v  = np.zeros((N,N))
M  = np.zeros((N,N))

for carga in cargas:
    v0=V(carga[0],carga[1],X,Y)
    v += v0
eps = 10e-4
err = 10

while(err > eps):
    V0 = np.copy(v)
    for i in range(1,N-1):
        for j in range(1,N-1):
            v[i,j] = (v[i+1,j]+v[i-1,j]+v[i,j+1]+v[i,j-1]+rho[i,j]*h**2)/4
            err += v[i,j]-V0[i,j]
    err = err/N**2



representa2d(X, Y, v, title='$Poisson$',  cmap=plt.cm.coolwarm)

Ex,Ey  = np.gradient(-v)



fig = plt.figure()
ax = fig.add_subplot(111)

# Plot the streamlines with an appropriate colormap and arrow style
color = 2 * np.log(np.hypot(Ex, Ey))
#ax.streamplot(x, y, Ey, Ex, color=color, linewidth=1, cmap=plt.cm.inferno,
#              density=2, arrowstyle='->', arrowsize=1.5)

# Add filled circles for the charges themselves
charge_colors = {True: '#aa0000', False: '#0000aa'}
for q, pos in cargas:
    ax.add_artist(Circle(pos, 0.05, color=charge_colors[q>0]))

ax.set_xlabel('$x$')
ax.set_ylabel('$y$')
ax.set_xlim(-10,10)
ax.set_ylim(-10,10)
ax.set_aspect('equal')



z=np.hypot(Ex,Ey)
color = 2 * np.log(np.hypot(Ex, Ey))
ax.streamplot(x, y, Ey, Ex, color=color, linewidth=1, cmap=plt.cm.inferno,
              density=2, arrowstyle='->', arrowsize=1.5)

# Add filled circles for the charges themselves
charge_colors = {True: '#aa0000', False: '#0000aa'}
for q, pos in cargas:
    ax.add_artist(Circle(pos, 0.05, color=charge_colors[q>0]))

ax.set_xlabel('$x$')
ax.set_ylabel('$y$')
ax.set_xlim(-10,10)
ax.set_ylim(-10,10)
ax.set_aspect('equal')



z=np.hypot(Ex,Ey)

#x2 = fig.add_subplot(122)
fig = plt.figure()

ax = fig.add_subplot(111)

plt.plot(x,np.transpose(z))
ax.set_xlabel('$x$')
ax.set_ylabel('$E$')
# Show the result in the plot window
plt.show()

colorinterpolation = 50
colourMap = plt.cm.coolwarm

fig = plt.figure()

#primer subplot

ax = fig.add_subplot(221)
# Configure the contour
plt.contourf(x, y , np.transpose(rho), colorinterpolation, cmap=colourMap)
plt.title("Densidad de Carga")

    
ax.set_xlabel('$x$')
ax.set_ylabel('$y$')
ax.set_xlim(-10,10)
ax.set_ylim(-10,10)
ax.set_aspect('equal')
plt.colorbar()


a3=fig.add_subplot(222)
plt.plot(x,np.transpose(rho))
a3.set_xlabel('$x$')
a3.set_ylabel('$rho$')

a4=fig.add_subplot(224)
plt.plot(y,rho)
a4.set_xlabel('$y$')
a4.set_ylabel('$rho$')
#
Ex, Ey = np.zeros((N, N)), np.zeros((N, N))


def E(q, r0, x, y):
    """Return the electric field vector E=(Ex,Ey) due to charge q at r0."""
    den = np.hypot(x-r0[0], y-r0[1])**3
    return q * (x - r0[0]) / den/(4*np.pi), q * (y - r0[1]) / den/(4*np.pi)

# TamaÃ±o y resolucion
for charge in cargas:
    ex, ey = E(*charge, x=X, y=Y)
    Ex += ex
    Ey += ey
   # print (charge)

fig = plt.figure()
ax = fig.add_subplot(111)

# Plot the streamlines with an appropriate colormap and arrow style
color = 2 * np.log(np.hypot(Ex, Ey))
ax.streamplot(x, y, Ex, Ey, color=color, linewidth=1, cmap=plt.cm.inferno,
              density=2, arrowstyle='->', arrowsize=1.5)

# Add filled circles for the charges themselves
charge_colors = {True: '#aa0000', False: '#0000aa'}
for q, pos in cargas:
    ax.add_artist(Circle(pos, 0.05, color=charge_colors[q>0]))

ax.set_xlabel('$x$')
ax.set_ylabel('$y$')
ax.set_xlim(-10,10)
ax.set_ylim(-10,10)
ax.set_aspect('equal')



z=np.hypot(Ex,Ey)

#x2 = fig.add_subplot(122)
fig = plt.figure()

ax = fig.add_subplot(111)

plt.plot(x,np.transpose(z))
ax.set_xlabel('$x$')
ax.set_ylabel('$E$')
# Mostramos el resultado
plt.show()
def V(q,r0,x,y):
    den=np.hypot(x-r0[0],y-r0[1])
    return q/den

Vv = np.zeros((N,N))

for carga in cargas:
    v0=V(*carga,x=X,y=Y)
    Vv += v0



# Set colour interpolation and colour map
colorinterpolation = 50
colourMap = plt.cm.coolwarm

fig = plt.figure()

#primer subplot

ax = fig.add_subplot(221)
# Configure the contour
plt.contourf(x, y , np.transpose(Vv), colorinterpolation, cmap=colourMap)
plt.title("Potencial")

# Add filled circles for the charges themselves
#charge_colors = {True: '#aa0000', False: '#0000aa'}
#for q, pos in cargas:
#    ax.add_artist(Circle(pos, 0.1, color=charge_colors[q>0]))
    
ax.set_xlabel('$x$')
ax.set_ylabel('$y$')
ax.set_aspect('equal')

plt.colorbar()


a3=fig.add_subplot(222)
plt.plot(x,np.transpose(Vv))
a3.set_xlabel('$x$')
a3.set_ylabel('$rho$')

a4=fig.add_subplot(224)
plt.plot(y,Vv)
a4.set_xlabel('$y$')
a4.set_ylabel('$rho$')


# Mostramos el resultado
plt.show()

# Calcular el potencial en 3D para cada punto en el plano xy
Z = Vv

# Crear la figura 3D
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Graficar el potencial en 3D
surf = ax.plot_surface(X, Y, Z, cmap='viridis')

# Configurar etiquetas y título
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Potencial')
ax.set_title('Potencial en 3D')

# Mostrar la figura
plt.show()
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Graficar el potencial en 3D
surf = ax.plot_surface(X, Y, z, cmap='viridis')

# Configurar etiquetas y título
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Potencial')
ax.set_title('Potencial en 3D')

# Mostrar la figura
plt.show()
